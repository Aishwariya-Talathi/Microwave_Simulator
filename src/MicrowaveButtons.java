
import java.util.Timer;
import java.util.TimerTask;

public class MicrowaveButtons extends javax.swing.JFrame {

    /**
     * Creates new form MicrowaveButtons
     */
    public MicrowaveButtons() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        jLabel1 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Light Off");

        jToggleButton1.setText("Open");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jButton1.setText("Cook");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2, jToggleButton1});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton2, jToggleButton1});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    static int seconds = 60; //Seconds : Counter for Cooking SecondsÏ
    Timer timer = new Timer(); //Timer Object used to execute timer tasks sequentially

    public void Start() //Start Method is called when the oven is cooking       
    {
        //Timer Tasks created for scheduling
        TimerTask task1 = new TimerTask() {
            @Override
            public void run() {

                seconds--; //Decrementing seconds counter till it reaches zero 
                jLabel3.setText("\nTimer\n" + seconds); //Displaying Timer
                jLabel1.setText("light On"); //Light on indicates that the light inside the oven is on during cooking
                jLabel2.setText("\nBeep!"); //A Beep sound is made when cooking starts
                if (seconds == 0) //Cooking is done until timer reaches zero
                {
                    jLabel3.setText("\nCooking Completed!");
                    jLabel1.setText("\nPower tube off!\nlight Off!");
                    jLabel2.setText("\nBeep!Beep!Beep!");
                    timer.cancel();
                }
                if (jToggleButton1.getText() == "CLOSE") //If the oven door is opened during cooking, the timer is set to zero and cooking stops.
                {
                    seconds = 60;
                    jLabel1.setText("\n");
                    jLabel3.setText("\nTimer : 0\n");
                    jLabel2.setText("\nCooking interrupted!");
                    timer.cancel();
                }

            }
        };

        timer.cancel();
        timer = new Timer();
        timer.scheduleAtFixedRate(task1, 500, 500); //Repeats the task task1, with an initial delay of 500ms, after every 500ms.
        jButton1.setActionCommand("RepeatIt"); //Setting An action for the button
    }

//Method for the Openening and closing of the oven using toggle button    
    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if (jToggleButton1.isSelected()) //When oven is opened
        {
            jToggleButton1.setText("CLOSE");
            jLabel1.setText("Light On");
        } else //When oven is closed
        {
            jToggleButton1.setText("OPEN");
            jLabel1.setText("Light Off");
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

//Method for the cook button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String action = evt.getActionCommand();
        if (action.equals("RepeatIt")) //
        {
            //Thread thread_t;
            //thread_t = new Thread(()->IncrementTimer());
            //thread_t.start();
            seconds += 60;

        }

        if ((jToggleButton1.getText() == "OPEN")) //If oven is closed
        {
            Start(); //Cooking Can only be initiated when the door is closed.
        }
        if ((jToggleButton1.getText()) == "CLOSE") //if oven is open
        {
            jLabel2.setText("Beep!");
        }


    }//GEN-LAST:event_jButton1ActionPerformed

//method for the cancel button
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
//If the timer is not zero,set it to zero.
        if (seconds > 0) {
            timer.cancel();
            seconds = 0;
            jLabel3.setText("\nTimer : 0 \n");
            jLabel2.setText("\nBeep!");
            jLabel1.setText("\nlight Off!");
        }
//If the timer is set to zero,simply Beep!
        else if (seconds == 0) {
            jLabel3.setText("\n");
            jLabel2.setText("\nBeep!");
            jLabel1.setText("\n");
        }

    }//GEN-LAST:event_jButton2ActionPerformed
//Main Begins HereÏ
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MicrowaveButtons().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables

    public void IncrementTimer() {
        seconds += 60;
        Start();
    }
}
